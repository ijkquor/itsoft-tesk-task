services:
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - '27017:27017'
    volumes:
      - ./data/db:/data/db
    restart: always
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet --username root --password root
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    restart: always
    volumes:
      - ./data/redis:/data
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    restart: always
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'check_port_connectivity']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s

  logger:
    build:
      context: .
      dockerfile: apps/logger/Dockerfile
    container_name: logger
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
    volumes:
      - ./.env:/app/.env
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network

  pollution:
    build:
      context: .
      dockerfile: apps/pollution/Dockerfile
    container_name: pollution
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
    volumes:
      - ./.env:/app/.env
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
